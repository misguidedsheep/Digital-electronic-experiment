// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2020 10:39:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab1_vlg_sample_tst(
	a,
	b,
	c,
	d,
	e,
	sampler_tx
);
input  a;
input  b;
input  c;
input  d;
input  e;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or c or d or e)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab1_vlg_check_tst (
	o1,
	o2,
	o3,
	sampler_rx
);
input  o1;
input  o2;
input  o3;
input sampler_rx;

reg  o1_expected;
reg  o2_expected;
reg  o3_expected;

reg  o1_prev;
reg  o2_prev;
reg  o3_prev;

reg  o1_expected_prev;
reg  o2_expected_prev;
reg  o3_expected_prev;

reg  last_o1_exp;
reg  last_o2_exp;
reg  last_o3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	o1_prev = o1;
	o2_prev = o2;
	o3_prev = o3;
end

// update expected /o prevs

always @(trigger)
begin
	o1_expected_prev = o1_expected;
	o2_expected_prev = o2_expected;
	o3_expected_prev = o3_expected;
end



// expected o1
initial
begin
	o1_expected = 1'bX;
end 

// expected o2
initial
begin
	o2_expected = 1'bX;
end 

// expected o3
initial
begin
	o3_expected = 1'bX;
end 
// generate trigger
always @(o1_expected or o1 or o2_expected or o2 or o3_expected or o3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o1 = %b | expected o2 = %b | expected o3 = %b | ",o1_expected_prev,o2_expected_prev,o3_expected_prev);
	$display("| real o1 = %b | real o2 = %b | real o3 = %b | ",o1_prev,o2_prev,o3_prev);
`endif
	if (
		( o1_expected_prev !== 1'bx ) && ( o1_prev !== o1_expected_prev )
		&& ((o1_expected_prev !== last_o1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o1_expected_prev);
		$display ("     Real value = %b", o1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o1_exp = o1_expected_prev;
	end
	if (
		( o2_expected_prev !== 1'bx ) && ( o2_prev !== o2_expected_prev )
		&& ((o2_expected_prev !== last_o2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o2_expected_prev);
		$display ("     Real value = %b", o2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o2_exp = o2_expected_prev;
	end
	if (
		( o3_expected_prev !== 1'bx ) && ( o3_prev !== o3_expected_prev )
		&& ((o3_expected_prev !== last_o3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o3_expected_prev);
		$display ("     Real value = %b", o3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_o3_exp = o3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg e;
// wires                                               
wire o1;
wire o2;
wire o3;

wire sampler;                             

// assign statements (if any)                          
lab1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.o1(o1),
	.o2(o2),
	.o3(o3)
);

// a
initial
begin
	a = 1'b0;
	a = #480000 1'b1;
	a = #480000 1'b0;
end 

// b
initial
begin
	b = 1'b0;
	b = #240000 1'b1;
	b = #240000 1'b0;
	b = #240000 1'b1;
	b = #240000 1'b0;
end 

// c
initial
begin
	c = 1'b0;
	c = #120000 1'b1;
	c = #120000 1'b0;
	c = #120000 1'b1;
	c = #120000 1'b0;
	c = #120000 1'b1;
	c = #120000 1'b0;
	c = #120000 1'b1;
	c = #120000 1'b0;
end 

// d
initial
begin
	d = 1'b0;
	d = #240000 1'b1;
	d = #240000 1'b0;
	d = #240000 1'b1;
	d = #240000 1'b0;
end 

// e
initial
begin
	e = 1'b0;
	e = #480000 1'b1;
	e = #480000 1'b0;
end 

lab1_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.sampler_tx(sampler)
);

lab1_vlg_check_tst tb_out(
	.o1(o1),
	.o2(o2),
	.o3(o3),
	.sampler_rx(sampler)
);
endmodule

